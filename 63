import numpy as np
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        obstacleGrid = np.array(obstacleGrid)
        unique_path = np.zeros((len(obstacleGrid), len(obstacleGrid[0])))
        unique_path[0,0] = 1
        print(unique_path)
        if obstacleGrid[-1][-1] == 1:
            return 0
        for i in range(len(obstacleGrid)):
            for j in range(len(obstacleGrid[0])):
                if (i,j) !=(0,0):
                    if i - 1 >=0 and j-1 >=0:
                        unique_path[i, j] = unique_path[i-1, j]*(1 - obstacleGrid[i-1, j]) + unique_path[i, j-1]*(1 - obstacleGrid[i, j-1])
                    elif i - 1 < 0 and j-1 >=0:
                        unique_path[i, j] = unique_path[i, j-1]*(1 - obstacleGrid[i, j-1])
                    else:
                        unique_path[i, j] = unique_path[i-1, j]*(1 - obstacleGrid[i-1, j])
        print(unique_path)
        return int(unique_path[-1, -1])
