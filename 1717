import numpy as np
class Solution:
    def maximumGain(self, s: str, x: int, y: int) -> int:
        patterns = ["ab", "ba"]
        seen = [False]*len(s)
        j = np.argmax(np.array([x, y]))
        max_pattern = patterns[j]
        min_pattern = patterns[1 - j]
        i = 0
        max_point = 0
        while i < len(s) - 1:
            if s[i] == max_pattern[0] and s[i+1] == max_pattern[1]:
                max_point += np.array([x, y])[j]
                if i > 0:
                    if i+2 < len(s):
                        s = s[:i] + s[i+2:]
                    else:
                        s = s[:i]
                else:
                    if i+2 < len(s):
                        s = s[i+2:]
                    else:
                        s = ""
                if i > 0:
                    i = i - 1
                else:
                    i = 0
            else:
                i = i + 1
        i = 0
        while i < len(s) - 1:
            if s[i] == min_pattern[0] and s[i+1] == min_pattern[1]:
                max_point += np.array([x, y])[1 -j]
                if i > 0:
                    if i+2 < len(s):
                        s = s[:i] + s[i+2:]
                    else:
                        s = s[:i]
                else:
                    if i+2 < len(s):
                        s = s[i+2:]
                    else:
                        s = ""
                if i > 0:
                    i = i - 1
                else:
                    i = 0
            else:
                i = i + 1
        return int(max_point)
