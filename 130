from collections import deque
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        border = deque()
        visited = set()
        n, m = len(board), len(board[0])
        for i in range(m):
            if board[0][i] == "O":
                border.append((0, i))
                visited.add((0, i))
            if board[n-1][i] == "O":
                border.append((n-1, i))
                visited.add((n-1, i))
        for j in range(1, n-1):
            if board[j][0] == "O":
                border.append((j, 0))
                visited.add((j, 0))
            if board[j][m-1] == "O":
                border.append((j, m-1))
                visited.add((j, m-1))   
        print(border)
        while border:
            x, y = border.pop()
            if board[x][y] == "O":
                board[x][y] = False
                if x - 1 > 0 and (x-1, y) not in visited:
                    border.append((x-1, y))
                    visited.add((x-1, y))
                if y-1  > 0 and (x, y-1) not in visited:
                    border.append((x, y-1))
                    visited.add((x, y-1))                    
                if x + 1 < n and (x+1, y) not in visited:
                    border.append((x+1, y))
                    visited.add((x+1, y))
                if y + 1 < m and (x, y+1) not in visited:
                    border.append((x, y+1))
                    visited.add((x, y+1))
                
        for i in range(n):
            for j in range(m):
                if not board[i][j]:
                    board[i][j] = "O"
                else:
                    board[i][j] = "X"
