import numpy as np
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        visited = set()
        island = 0
        n, m = len(grid), len(grid[0])
        def is_border(i,j):
            if i == 0 or i == n - 1 or j == 0 or j == m - 1 or grid[i][j + 1] == "0" or grid[i][j - 1] == "0" or grid[i + 1][j] == "0" or grid[i - 1][j] == "0":
                return True
            return False
        number_one = 0
        for i in range(n):
            number_one += sum(list(map(int, grid[i])))
        print(int(number_one))
        for i in range(n):
            if len(visited) == int(number_one):
                break
            for j in range(m):
                if len(visited) == int(number_one):
                    break
                if grid[i][j] == "1" and (i,j) not in visited:
                    visited.add((i,j))
                    if is_border(i,j):
                        queue = deque()
                        queue.append((i,j))
                        while queue:
                            x, y = queue.pop()
                            if  x - 1 >= 0 and grid[x - 1][y] == "1" and ((x-1, y) not in visited):
                                queue.append((x-1, y))
                                visited.add((x-1,y))
                            if  x + 1 < n and grid[x + 1][y] == "1" and ((x+1, y) not in visited):
                                queue.append((x+1, y))
                                visited.add((x+1, y))
                            if  y - 1 >= 0 and grid[x][y - 1] == "1" and ((x, y - 1) not in visited):
                                queue.append((x, y - 1))
                                visited.add((x, y - 1))
                            if  y + 1 < m and grid[x][y + 1] == "1" and ((x, y + 1) not in visited):
                                queue.append((x, y + 1))
                                visited.add((x, y + 1))
                        island +=1
        return island
